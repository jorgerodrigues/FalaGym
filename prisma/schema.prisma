// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @unique @default(uuid())
  email                String    @unique
  firstName            String?
  lastName             String?
  status               String    @default("ACTIVE")
  password             String
  nativeLanguage       String    @default("en")
  onboardingCompleted  Boolean   @default(false)
  currentEloScore      Int       @default(1200)
  lastSessionTimestamp DateTime?

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  prompt        Prompt[]
  Card          Card[]
  CardReviewLog CardReviewLog[]
  UserSettings  UserSettings[]
  Session       Session[]

  @@map("user")
}

model Sentence {
  id             String  @id @unique @default(uuid())
  content        String
  translation    String
  userId         String?
  language       String?
  nativeLanguage String?
  audioUrl       String?
  difficultyElo  Int     @default(1200)

  words Word[]
  Card  Card[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sentence")
}

// A card implements a basic practice card
// if there is a sentence associated with it we use that as the card basis
model Card {
  id             String   @id @unique @default(uuid())
  front          String
  back           String
  tags           String[]
  repetitions    Int      @default(0) // number of times the card has been successfuly reviewed
  easeFactor     Float    @default(2.5) // number used as a multiplier for the next interval calculation
  interval       Float    @default(1) // number of days until the next review
  nextDueDate    DateTime @default(now()) // date and time of the next review
  type           String   @default("sentence")
  language       String   @default("en")
  nativeLanguage String   @default("pt")

  sentence   Sentence? @relation(fields: [sentenceId], references: [id], onDelete: SetNull)
  sentenceId String?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  CardReviewLog CardReviewLog[]

  @@map("card")
}

model CardReviewLog {
  id             String   @id @unique @default(uuid())
  reviewDate     DateTime @default(now())
  rating         Int      @default(0) // rating 0, 3 or 5
  streakPosition Int      @default(0)
  eloImpact      Float    @default(0.0)

  card   Card?   @relation(fields: [cardId], references: [id], onDelete: SetNull)
  cardId String?

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  session   Session? @relation(fields: [sessionId], references: [id], onDelete: SetNull)
  sessionId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("card_review_log")
}

model Word {
  id             String  @id @unique @default(uuid())
  word           String
  definition     String
  language       String
  nativeLanguage String  @default("en")
  audioUrl       String?

  Sentence   Sentence? @relation(fields: [sentenceId], references: [id])
  sentenceId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("word")
}

model Prompt {
  id          String @id @unique @default(uuid())
  theme       String
  description String

  user             User               @relation(fields: [userId], references: [id])
  userId           String
  infoPoints       InfoPoint[]
  EssayPracticeRun EssayPracticeRun[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("prompt")
}

model InfoPoint {
  id       String  @id @unique @default(uuid())
  content  String
  category String?
  promptId String
  prompt   Prompt  @relation(fields: [promptId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("info_prompt")
}

model EssayPracticeRun {
  id               String  @id @unique @default(uuid())
  essay            String
  wordCount        Int?
  overallScore     Int
  grammarScore     Int
  spellingScore    Int
  punctuationScore Int
  styleScore       Int
  prompt           Prompt? @relation(fields: [promptId], references: [id])
  promptId         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("essay_practice_run")
}

model Settings {
  id    String @id @unique @default(uuid())
  name  String
  type  String
  scope String

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  userSettings UserSettings[]

  @@map("settings")
}

model UserSettings {
  id         String  @id @unique @default(uuid())
  enabled    Boolean @default(true)
  settingsId String
  userId     String
  data       String?

  settings Settings @relation(fields: [settingsId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_settings")
}

model Session {
  id              String    @id @unique @default(uuid())
  userId          String?
  startTimestamp  DateTime  @default(now())
  endTimestamp    DateTime?
  startingUserElo Int
  endingUserElo   Int?
  status          String    @default("ACTIVE") // ACTIVE or COMPLETED

  user          User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  CardReviewLog CardReviewLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session")
}
