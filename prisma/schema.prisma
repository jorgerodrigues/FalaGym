// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @unique @default(uuid())
  email     String  @unique
  firstName String?
  lastName  String?
  status    String  @default("ACTIVE")
  password  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  prompt    Prompt[]
  Card      Card[]

  @@map("user")
}

model Sentence {
  id          String  @id @unique @default(uuid())
  content     String
  translation String
  userId      String?
  words       Words[]
  Card        Card[]

  @@map("sentence")
}

// A card implements a basic practice card
// if there is a sentence associated with it we use that as the card basis
model Card {
  id          String   @id @unique @default(uuid())
  front       String?
  back        String?
  tags        String[]
  easeFactor  Float    @default(2.5) // number used as a multiplier for the next interval calculation
  interval    Float    @default(1) // number of days until the next review
  nextDueDate DateTime @default(now()) // date and time of the next review

  sentence   Sentence @relation(fields: [sentenceId], references: [id])
  sentenceId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("card")
}

model Words {
  id         String    @id @unique @default(uuid())
  word       String
  definition String
  language   String
  Sentence   Sentence? @relation(fields: [sentenceId], references: [id])
  sentenceId String?

  @@map("words")
}

model Prompt {
  id          String @id @unique @default(uuid())
  theme       String
  description String

  user             User               @relation(fields: [userId], references: [id])
  userId           String
  infoPoints       InfoPoint[]
  EssayPracticeRun EssayPracticeRun[]

  @@map("prompt")
}

model InfoPoint {
  id       String  @id @unique @default(uuid())
  content  String
  category String?
  promptId String
  prompt   Prompt  @relation(fields: [promptId], references: [id])

  @@map("info-prompt")
}

model EssayPracticeRun {
  id               String  @id @unique @default(uuid())
  essay            String
  wordCount        Int?
  overallScore     Int
  grammarScore     Int
  spellingScore    Int
  punctuationScore Int
  styleScore       Int
  prompt           Prompt? @relation(fields: [promptId], references: [id])
  promptId         String?

  @@map("essay_practice_run")
}
